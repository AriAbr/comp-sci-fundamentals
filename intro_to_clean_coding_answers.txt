# Exercises

1. In your own words, explain what clean code is and why it is important.

Clean code is code written with an eye towards readability, maintainability,
and simplicity. It takes into account things like using proper variable naming
conventions, SRP (the Single Responsiblity Principle) and DRY (the Don't Repeat
Yourself principle). Clean code is important because it ensures that both you
and other future developer with be able to easily work with and update the code
you have written.

2. Read this article about Toyota and their use of bad code. Although you may
not yet understand all of the topics discussed, think about another commonly
used object that relies on computers and explain what would happen if the code
was not created to an acceptable standard.
https://www.edn.com/design/automotive/4423428/Toyota-s-killer-firmware--Bad-design-and-its-consequences

Another commonly used object that might have bad code is a cell phone. In this
case, bad code could lead to a long list of possible issues. To give just one
example, an app might continue running in the background when the user does not
want it to.

3. Would you consider the following to be clean code? Explain why or why not.
If not, refactor the code.

This code is not clean. It has too many unnecessary comments, then function and
variable names are not descriptive and it does not use appropriate nesting.
Additionally, since PRINT runs regardless of which unit is inputted, running it
inside of the IF statements creates unnecessary repetition. It can instead
be used once after the conditional statements.

FUNCTION convertTemperature(degrees, unit)
  IF unit = "F" THEN
    SET convertedTemperature to (degreesâˆ’32) * (5/9)  // Formula to convert degrees fahrenheit to celsius
  ELSE IF unit = "C" THEN
    SET convertedTemperature to degrees * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
  END IF
  PRINT convertedTemperature
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not.
If not, refactor the code.

I would say this code is clean, though perhaps the function name should be more
fully spelled out to "calculatePercent" rather than abbreviating it.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

5. Using pseudocode, refactor the code for the following examples using the
principles you have learned in this checkpoint.

  a. The following function prints the subtotal of a customer's transaction and
  receives payment accordingly.

  FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
    PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
    CALL receivePayment WITH subTotal, discountRate and paymentType
  END FUNCTION

  FUNCTION receivePayment (subTotal, discountRate, paymentType)
    CALL getPayment RETURNING amount
    IF paymentType = 'CASH' THEN
      PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
    ELSE IF paymentType = 'CREDIT CARD' THEN
      PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
    END IF
  END FUNCTION

  b. The following function checks out a book if there are no issues with the
  guest's account.

  FUNCTION checkoutBook(book, guest)
    IF hasNoIssues(guest) THEN
      APPEND book to guest.books
      SET book.status to "Checked Out"
      PRINT "Your books have been issued."
    ELSE
      PRINT "Unable to check out book."
    END IF
  END FUNCTION

  FUNCTION hasNoIssues(guest)
    RETURN guest.accountActive and NOT(guest.hasOverdueBooks) and guest.outstandingFees = 0
  END FUNCTION

  c. The following class is a code snippet that should support the transactions
  a customer can perform at an ATM.

  CLASS BankAccount

    FUNCTION displayBalance
      PRINT balance
    END FUNCTION

    FUNCTION deposit(amount)
      SET balance to balance + amount
    END FUNCTION

    FUNCTION withdraw(amount)
      IF balance > amount THEN
        SET balance to balance - amount
      END IF
    END FUNCTION

  END CLASS

  CLASS CustomerOfferings

    FUNCTION creditCardOffer
      IF NOT(customer.hasCreditCard) THEN
        CALL offerCreditCard
      END IF
    END FUNCTION

    FUNCTION checkStatus
      IF NOT(customer.hasCheckingAccount) THEN
        CALL offerCheckingAccount
      END IF
    END FUNCTION

    ....
    ....
    ....

  END CLASS


# Programming Questions

You may do the following problems in any language of your choice. Use the clean
code principles taught in this section while writing the code.


6. Square Given an array of integers, find out whether the sum of the integers
is a perfect square. If it is a perfect square, return the square root,
otherwise return the sum.
Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function rootOrSum (numbersArray) {
  var arraySum = addArray(numbersArray);
  if (Math.sqrt(arraySum)%1 === 0) {
    return Math.sqrt(arraySum);
  } else {
  return arraySum;
  }
}

function addArray(numbersArray) {
  var sum = 0;
  for (let i=0; i<numbersArray.length; i++) {
    currentNumber = numbersArray[i];
    sum += currentNumber;
  }
  return sum;
}


7. Duplicate Given an array of integers, find out whether the array contains
any duplicate elements. The function should return true if any value appears at
least twice in the array, and false if every element is distinct.

function hasDuplicate(integerArray) {
  for (let i = 0; i < integerArray.length; i++) {
    var currentInteger = integerArray[i]
    var remainingIntegersArray = integerArray.slice(i+1);
    if (remainingIntegersArray.includes(currentInteger)) {
      return true;
    }
  }
  return false;
}


# Extra Credit
8. Anagram An anagram is a word, phrase, or name formed by rearranging the
letters of another word. For example, spar can be formed from rasp. Given two
strings, stringOne and stringTwo, determine if stringOne is an anagram of
stringTwo. Assume that the strings contain only lowercase letters and do not
worry about case-sensitivity. Hint: Your first task will be to convert the
strings to arrays.

function isAnagram(stringOne, stringTwo) {
  var arrayOne = stringToArray(stringOne);
  var arrayTwo = stringToArray(stringTwo);

  //remove elements that appear in both arrays
  for(let i = 0; i < stringOne.length; i++){
    for(let j = 0; j < stringTwo.length; j++){
      if (arrayOne[0] === arrayTwo[j]){
        arrayOne.shift()
        arrayTwo = arrayTwo.slice(0,j).concat(arrayTwo.slice(j+1,arrayTwo.length));
        break;
      }
    }
  }

  if (arrayOne.length === 0 && arrayTwo.length === 0) {
    return true;
  } else {
    return false;
  }
}

function elininateArrayDuplicates(arrayOne, arrayTwo) {

}

function stringToArray (str) {
  var returnArr = [];
  for (let i = 0; i < str.length; i++){
    returnArr.push(str[i]);
  }
  return returnArr;
}
